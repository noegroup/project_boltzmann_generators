#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language american
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\topmargin 2cm
\rightmargin 3cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Latent Markov Chain Monte Carlo
\end_layout

\begin_layout Author
Frank No√©
\begin_inset Formula $^{1,2*}$
\end_inset


\end_layout

\begin_layout Standard

\series bold
Affiliations
\series default
: 
\end_layout

\begin_layout Standard
\begin_inset Formula $1$
\end_inset

: FU Berlin, Department of Mathematics and Computer Science, Arnimallee
 6, 14195 Berlin
\end_layout

\begin_layout Standard
\begin_inset Formula $2$
\end_inset

: Rice University, Department of Chemistry, Houston, Texas 77005, United
 States
\end_layout

\begin_layout Abstract
The recently introduced Boltzmann Generators are an approach to generate
 direct, independent samples of equilibrium states in many-body systems.
 This approach works by learning an invertible variable transformation to
 a so-called latent space in which the sought equilibrium distribution becomes
 a simple distribution, such as a Gaussian.
 The latent space is then sampled and samples in configuration space are
 generated.
 Since the generated configuration space distribution is not exactly the
 equilibrium distribution, it must be reweighted to the true equilibrium
 distribution.
 However, reweighting suffers from numerical and statistical problems when
 the generated and the equilibrium distribution have significant differences.
 Here we present an alternative approach: we construct a Markov-Chain Monte
 Carlo method in which independent proposals are generated by sampling the
 latent distribution and the equilibrium distribution is used for acceptance.
 We demonstrate that Latent MCMC can efficiently sample the equilibrium
 states in toy models and condensed matter systems.
 
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figs/Fig_Illustration.pdf
	lyxscale 50
	width 50text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:illustration"

\end_inset


\series bold
Boltzmann Generators.

\series default
 
\series bold
a)
\series default
 A Boltzmann Generator is trained by minimizing the difference between its
 generated distribution and the desired Boltzmann distribution.
 It is used by transforming samples from a simple (e.g., Gaussian) distribution
 to generated configurations.
 To compute thermodynamics, such as configurational free energies, the samples
 must be reweighted to the Boltzmann distribution.
 
\series bold
b)
\series default
 The Boltzmann Generator is composed of invertible neural network blocks.
 Here, a volume-preserving block is shown as an example.
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
CC: Too much detail.
 Put b-e in the SI.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Latent Markov Chain Monte Carlo
\end_layout

\begin_layout Subsection
Latent transformation
\end_layout

\begin_layout Standard
The basis of latent sampling is an invertible transformation between configurati
ons 
\begin_inset Formula $\mathbf{x}$
\end_inset

 and latent variables 
\begin_inset Formula $\mathbf{z}$
\end_inset

 in which the sampling takes place:
\begin_inset Formula 
\begin{align*}
\mathbf{z} & =F_{xz}(\mathbf{x})\\
\mathbf{x} & =F_{zx}(\mathbf{z}).
\end{align*}

\end_inset

Hence 
\begin_inset Formula $T_{xz}=T_{zx}^{-1}$
\end_inset

.
 Here, we implement these transformations with invertible deep neural networks,
 using volume-preserving 
\begin_inset CommandInset citation
LatexCommand cite
key "DinhDruegerBengio_NICE2015"
literal "false"

\end_inset

 and non-volume preserving transformations 
\begin_inset CommandInset citation
LatexCommand cite
key "DinhBengio_RealNVP"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
Each transformation has a Jacobian matrix with the pairwise first derivatives
 of outputs with respect to inputs:
\begin_inset Formula 
\begin{align*}
\mathbf{J}_{zx}(\mathbf{z}) & =\left[\frac{\partial F_{zx}(\mathbf{z})}{\partial z_{1}},...,\frac{\partial F_{zx}(\mathbf{z})}{\partial z_{n}}\right]\\
\mathbf{J}_{xz}(\mathbf{x}) & =\left[\frac{dF_{xz}(\mathbf{x})}{dx_{1}},...,\frac{dF_{xz}(\mathbf{x})}{dx_{n}}\right]
\end{align*}

\end_inset

The absolute value of the Jacobian's determinant, 
\begin_inset Formula $\left|\det\mathbf{J}_{zx}(\mathbf{z})\right|$
\end_inset

, measures how much a volume element at 
\begin_inset Formula $\mathbf{z}$
\end_inset

 is scaled by the transformation.
 Forward and reverse transformation are related by 
\begin_inset Formula $\left|\det\mathbf{J}_{zx}(\mathbf{z})\right|=\left|\det\mathbf{J}_{xz}(\mathbf{x})\right|^{-1}$
\end_inset

, and respectively for 
\begin_inset Formula $\mathbf{x}$
\end_inset

 and 
\begin_inset Formula $\mathbf{z}$
\end_inset

 exchanged.
 Our main motivation to use invertible transformations is that they allow
 us to transform random variables as follows:
\begin_inset Formula 
\begin{align}
p_{X}(\mathbf{x}) & =p_{Z}(\mathbf{z})\left|\det\mathbf{J}_{zx}(\mathbf{z})\right|^{-1}=p_{Z}(T_{xz}(\mathbf{x}))\left|\det\mathbf{J}_{xz}(\mathbf{x})\right|\label{eq:transform_zx}\\
p_{Z}(\mathbf{z}) & =p_{X}(\mathbf{x})\left|\det\mathbf{J}_{xz}(\mathbf{x})\right|^{-1}=p_{X}(T_{zx}(\mathbf{z}))\left|\det\mathbf{J}_{zx}(\mathbf{z})\right|\label{eq:transform_xz}
\end{align}

\end_inset


\end_layout

\begin_layout Subsection
Sampling and reweighting
\end_layout

\begin_layout Standard
Suppose we want to sample from the target distribution 
\begin_inset Formula $\mu_{X}(\mathbf{x})$
\end_inset

 in configuration space (e.g., the Boltzmann distribution).
 To this end, we train the transformation 
\begin_inset Formula $F_{zx}(\mathbf{z})$
\end_inset

 such that sampling 
\begin_inset Formula $\mathbf{z}$
\end_inset

 from the prior distribution 
\begin_inset Formula $\mu_{Z}(\mathbf{z})$
\end_inset

 and transformation through 
\begin_inset Formula $F_{zx}$
\end_inset

 will produce a distribution 
\begin_inset Formula $q_{X}(\mathbf{x})$
\end_inset

 is similar to the target 
\begin_inset Formula $\mu_{X}(\mathbf{x})$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\mu_{Z}(\mathbf{z}) & \overset{F_{zx}}{\longrightarrow} & q_{X}(\mathbf{x})\approx\mu_{X}(\mathbf{x})
\end{eqnarray*}

\end_inset

For example, we may use the isotropic Gaussian prior as in 
\begin_inset CommandInset citation
LatexCommand cite
key "DinhDruegerBengio_NICE2015,NoeWu_BoltzmannGenerators"
literal "false"

\end_inset

:
\begin_inset Formula 
\begin{equation}
\mu_{Z}(\mathbf{z})=\mathcal{N}(\mathbf{0},\sigma^{2}\mathbf{I})=Z_{Z}^{-1}\mathrm{e}^{-u_{Z}(\mathbf{x})},\label{eq:z_Gaussian_prior}
\end{equation}

\end_inset

with normalization constant 
\begin_inset Formula $Z_{Z}$
\end_inset

 and prior energy
\begin_inset Formula 
\begin{align}
u_{Z}(\mathbf{z}) & =\frac{1}{2\sigma_{k}^{2}}\left\Vert \mathbf{z}\right\Vert ^{2},\label{eq:z_Gaussian_energy}
\end{align}

\end_inset

which is equal to 
\begin_inset Formula $-\log\mu_{Z}(\mathbf{z})$
\end_inset

, up to a constant.
 As our aim is to sample with respect to the distribution 
\begin_inset Formula $\mu_{X}(\mathbf{x})$
\end_inset

, we need to modify the sampled distribution 
\begin_inset Formula $q_{X}(\mathbf{x})$
\end_inset

 accordingly.
 The simplest approach is reweighting [
\series bold
cite
\series default
], where we compute the ratio of the two probability densities for every
 sample, and use this as a statistical weight for this sample.
 Using (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:transform_zx"
plural "false"
caps "false"
noprefix "false"

\end_inset

-
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:transform_xz"
plural "false"
caps "false"
noprefix "false"

\end_inset

), we obtain:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{align}
w_{X}(\mathbf{x}) & =\frac{\mu_{X}(\mathbf{x})}{q_{X}(\mathbf{x})}=\frac{q_{Z}(\mathbf{z})}{\mu_{Z}(\mathbf{z})}.\label{eq:reweighting_w}\\
 & \propto\mathrm{e}^{-u_{X}\left(T_{zx}(\mathbf{z})\right)+u_{Z}(\mathbf{z})+\log\left|\det\mathbf{J}_{zx}(\mathbf{z})\right|}\nonumber 
\end{align}

\end_inset

This approach is followed in 
\begin_inset CommandInset citation
LatexCommand cite
key "NoeWu_BoltzmannGenerators"
literal "false"

\end_inset

.
 Using these weights, expectation values can be computed as
\begin_inset Formula 
\begin{equation}
\mathbb{E}_{\mu_{X}}[O]=\mathbb{E}_{w_{X}p_{X}}[O]\approx\frac{\sum_{i=1}^{N}w_{X}(\mathbf{x})O(\mathbf{x})}{\sum_{i=1}^{N}w_{X}(\mathbf{x})}.\label{eq:weighted_expectation}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
The disadvantage of reweighting is that it requires that 
\begin_inset Formula $q_{X}$
\end_inset

 is an excellent approximation of 
\begin_inset Formula $\mu_{X}$
\end_inset

.
 If the two distributions are significantly different for some configurations,
 and that is hard to avoid in high dimensions, expectation values such as
 (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:weighted_expectation"
plural "false"
caps "false"
noprefix "false"

\end_inset

) may be dominated by a few samples.
 In this case, the method is stastistically inefficient, as only few 
\end_layout

\begin_layout Subsection
Latent MCMC
\end_layout

\begin_layout Standard
In MCMC methods, we generate a sequences 
\begin_inset Formula $\{\mathbf{x}_{t}\}_{t=1,...,T}$
\end_inset

 by steps
\begin_inset Formula 
\begin{equation}
\begin{array}{ccccc}
 & \mathrm{prop} & \mathbf{x}_{t}^{*}\\
 & \nearrow &  & \searrow & \mathrm{acc}\\
\mathbf{x}_{t} & \rightarrow & \rightarrow & \rightarrow & \mathbf{x}_{t+1}
\end{array}\label{eq:compgraph_proposal}
\end{equation}

\end_inset

where the proposal step generates a proposal 
\begin_inset Formula $\mathbf{x}_{t}^{*}$
\end_inset

 from a given configuration 
\begin_inset Formula $\mathbf{x}_{t}$
\end_inset

 with probability 
\begin_inset Formula $p_{\mathrm{prop}}(\mathbf{x}_{t}\rightarrow\mathbf{x}_{t}^{*})$
\end_inset

.
 With probability 
\begin_inset Formula $p_{\mathrm{acc}}(\mathbf{x}_{t}\rightarrow\mathbf{x}_{t}^{*})$
\end_inset

 this proposal is accepted, otherwise we stay at the old state.
 This is realized by generating a uniform random variable in 
\begin_inset Formula $[0,1)$
\end_inset

, 
\begin_inset Formula $r\sim\mathrm{Uniform}(0,1)$
\end_inset


\begin_inset Formula 
\[
\mathbf{x}_{t+1}=\begin{cases}
\mathbf{x}_{t}^{*} & r<p_{\mathrm{acc}}(\mathbf{x}_{t}\rightarrow\mathbf{x}_{t}^{*})\\
\mathbf{x}_{t} & \mathrm{else}.
\end{cases}
\]

\end_inset

The typical computational graph is thus as shown in (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:compgraph_proposal"
plural "false"
caps "false"
noprefix "false"

\end_inset

): 
\begin_inset Formula $\mathbf{x}_{t}^{*}$
\end_inset

 depends on 
\begin_inset Formula $\mathbf{x}_{t}$
\end_inset

 and 
\begin_inset Formula $\mathbf{x}_{t+1}$
\end_inset

 depends on both 
\begin_inset Formula $\mathbf{x}_{t},\mathbf{x}_{t}^{*}$
\end_inset

.
 Standard MCMC is thus an inherently sequential algorithm.
\end_layout

\begin_layout Standard
We have a lot of flexibility in choosing proposal moves, as long as 
\begin_inset Formula $p_{\mathrm{prop}}$
\end_inset

 can be computed for every move and the move set is ergodic, i.e.
 any point of configuration space with nonzero equilibrium propobability
 can be reached.
 The MCMC method defines 
\begin_inset Formula $p_{\mathrm{acc}}$
\end_inset

 such that the MCMC chain will sample from the equilibrium distribution.
 The most common choice is the Metropolis function:
\begin_inset Formula 
\begin{equation}
p_{\mathrm{acc}}=\min\left\{ 1,\frac{\mu_{X}(\mathbf{x}_{t}^{*})}{\mu_{X}(\mathbf{x}_{t})}\frac{p_{\mathrm{prop}}(\mathbf{x}_{t}^{*}\rightarrow\mathbf{x}_{t})}{p_{\mathrm{prop}}(\mathbf{x}_{t}\rightarrow\mathbf{x}_{t}^{*})}\right\} .\label{eq:pacc_Metropolis}
\end{equation}

\end_inset

Latent MCMC makes the following choice as a proposal step: Each proposal
 is generated by sampling the latent space distribution independently and
 transforming it via 
\begin_inset Formula $F_{zx}$
\end_inset

.
 As a result, the proposed configurations 
\begin_inset Formula $\mathbf{x}_{t}^{*}$
\end_inset

 are sampled from the generated distribution 
\begin_inset Formula $q_{X}(\mathbf{x})$
\end_inset

:
\begin_inset Formula 
\begin{align*}
\mathbf{z}_{t}^{*} & \sim\mu_{Z}(\mathbf{z})\\
\mathbf{x}_{t}^{*}=F(\mathbf{z}_{t}^{*}) & \sim q_{X}(\mathbf{x})
\end{align*}

\end_inset

The Metropolis acceptance probability then becomes:
\begin_inset Formula 
\begin{equation}
p_{\mathrm{acc}}=\min\left\{ 1,\frac{\mu_{X}(\mathbf{x}_{t}^{*})}{\mu_{X}(\mathbf{x}_{t})}\frac{q_{X}(\mathbf{x}_{t})}{q_{X}(\mathbf{x}_{t}^{*})}\right\} =\min\left\{ 1,\frac{w_{X}(\mathbf{x}_{t}^{*})}{w_{X}(\mathbf{x}_{t})}\right\} ,\label{eq:pacc_Metropolis-Latent}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
where we have used the definition of the weights from (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:reweighting_w"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Using (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:reweighting_w"
plural "false"
caps "false"
noprefix "false"

\end_inset

), we can further write:
\begin_inset Formula 
\[
Q(\mathbf{x}_{t},\mathbf{x}_{t}^{*})=-\log\frac{w_{X}(\mathbf{x}_{t}^{*})}{w_{X}(\mathbf{x}_{t})}=\Delta u_{X}(\mathbf{z}_{t},\mathbf{z}_{t}^{*})-\Delta u_{Z}(\mathbf{z}_{t},\mathbf{z}_{t}^{*})-\Delta R(\mathbf{z}_{t},\mathbf{z}_{t}^{*})
\]

\end_inset

with 
\begin_inset Formula 
\begin{align*}
\Delta u_{X}(\mathbf{z}_{t},\mathbf{z}_{t}^{*}) & =u_{X}\left(F_{zx}(\mathbf{z}_{t}^{*})\right)-u_{X}\left(F_{zx}(\mathbf{z}_{t})\right)\\
\Delta u_{Z}(\mathbf{z}_{t},\mathbf{z}_{t}^{*}) & =u_{Z}(\mathbf{z}_{t}^{*})-u_{Z}(\mathbf{z}_{t})\\
\Delta R(\mathbf{z}_{t},\mathbf{z}_{t}^{*}) & =\log\left|\det\mathbf{J}_{zx}(\mathbf{z}_{t}^{*})\right|-\log\left|\det\mathbf{J}_{zx}(\mathbf{z})\right|
\end{align*}

\end_inset

If we use a Gaussian proposal distribution as in Eq.
 (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:z_Gaussian_prior"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Because proposals are independent, they can be made in parallel and our
 computational graphs simplifies to:
\begin_inset Formula 
\begin{equation}
\begin{array}{ccccccc}
 & \mathrm{prop} & \mathbf{x}_{t}^{*} &  & \mathbf{x}_{t+1}^{*} &  & \cdots\\
 & \mathrm{acc} & \downarrow &  & \downarrow\\
\mathbf{x}_{t} & \rightarrow & \mathbf{x}_{t} & \rightarrow & \mathbf{x}_{t+1} & \rightarrow & \cdots
\end{array}\label{eq:compgraph_proposal_Latent}
\end{equation}

\end_inset

This structure is important for computational efficiency: We can generate
 a batch of proposals 
\begin_inset Formula $\{\mathbf{x}_{1}^{*},...,\mathbf{x}_{B}^{*}\}$
\end_inset

 in parallel, transform them to configurations and compute their energies
 and Jacobians in parallel.
 We are then only left with a simple and fast serial step in which 
\begin_inset Formula $Q(\mathbf{x}_{t},\mathbf{x}_{t}^{*})$
\end_inset

 is computed from already-computed components, and 
\begin_inset Formula $\mathbf{x}_{t+1}$
\end_inset

 is selected, for all members of the batch.
 The algorithm using a Gaussian prior density is outlined in (
\series bold
ref
\series default
).
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
LatentMCMC(
\begin_inset Formula $\mathbf{x}_{0}$
\end_inset

, 
\begin_inset Formula $\sigma$
\end_inset

, 
\begin_inset Formula $B$
\end_inset

)
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathbf{z}_{0}=F_{xz}(\mathbf{x}_{0})$
\end_inset

, 
\end_layout

\begin_layout Enumerate
Generate 
\begin_inset Formula $\{\mathbf{z}_{1}^{*},...,\mathbf{z}_{B}^{*}\}$
\end_inset

 with 
\begin_inset Formula $\mathbf{z}_{1}^{*}\sim\mathcal{N}(0,\mathbf{I})$
\end_inset

.
\end_layout

\begin_layout Enumerate
For 
\begin_inset Formula $i=0,...,N$
\end_inset

 compute 
\begin_inset Formula 
\begin{align*}
R_{i} & =\log\left|\det\mathbf{J}_{zx}(\mathbf{z}_{i})\right|\\
u_{X,i} & =u_{X}(\mathbf{x}_{i})\\
u_{Z,i} & =\frac{1}{2\sigma^{2}}\left\Vert \mathbf{z}_{i}\right\Vert ^{2}
\end{align*}

\end_inset


\end_layout

\begin_layout Enumerate
For 
\begin_inset Formula $t=1,...,B$
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Enumerate
Sample 
\begin_inset Formula $r\sim\mathrm{Uniform}(0,1)$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $Q=\log J(\mathbf{z}_{1})-\log J(\mathbf{z}_{2})+u(T_{zx}(\mathbf{z}_{2}))-u(T_{zx}(\mathbf{z}_{1}))+\frac{1}{2\sigma^{2}}\left\Vert \mathbf{z}_{1}\right\Vert ^{2}-\frac{1}{2\sigma^{2}}\left\Vert \mathbf{z}_{2}\right\Vert ^{2}$
\end_inset


\end_layout

\begin_layout Enumerate
If 
\begin_inset Formula $-\log r\ge Q(\mathbf{x}_{t},\mathbf{x}_{t}^{*})$
\end_inset

: 
\begin_inset Formula $\mathbf{x}_{t+1}=\mathbf{x}_{t}^{*}$
\end_inset


\end_layout

\begin_layout Enumerate
Else: 
\begin_inset Formula $\mathbf{x}_{t+1}=\mathbf{x}_{t}$
\end_inset


\end_layout

\end_deeper
\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Latent MCMC with isotropic Gaussian prior with variance 
\begin_inset Formula $\sigma^{2}$
\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{align*}
r & \le p_{\mathrm{acc}}(\mathbf{z}_{1}\rightarrow\mathbf{z}_{2})\\
-\log r & \ge\log J(\mathbf{z}_{1})-\log J(\mathbf{z}_{2})+u(T_{zx}(\mathbf{z}_{2}))-u(T_{zx}(\mathbf{z}_{1}))+\frac{1}{2\sigma^{2}}\left\Vert \mathbf{z}_{1}\right\Vert ^{2}-\frac{1}{2\sigma^{2}}\left\Vert \mathbf{z}_{2}\right\Vert ^{2}
\end{align*}

\end_inset


\end_layout

\begin_layout Subsection
Thermodynamics
\end_layout

\begin_layout Standard

\series bold
Boltzmann distribution
\series default
: A special case is to use Boltzmann Generators to sample from the Boltzmann
 distribution of the canonical ensemble.
 This distribution has the form:
\begin_inset Formula 
\begin{equation}
\mu_{X}(\mathbf{x})=Z_{X}^{-1}\mathrm{e}^{-\beta U(\mathbf{x})}\label{eq:Boltzmann_distribution}
\end{equation}

\end_inset

where 
\begin_inset Formula $\beta^{-1}=k_{B}T$
\end_inset

 with Boltzmann constant 
\begin_inset Formula $k_{B}$
\end_inset

 and temperature 
\begin_inset Formula $T$
\end_inset

.
 When we only have one temperature, we can simply subsume the constant into
 a reduced energy
\begin_inset Formula 
\[
u(\mathbf{x})=\frac{U(\mathbf{x})}{k_{B}T}
\]

\end_inset

In order to evaluate a set of temperatures 
\begin_inset Formula $(T^{1},...,T^{K})$
\end_inset

, we can define a reference temperature 
\begin_inset Formula $T^{0}$
\end_inset

 and the respective reduced energy 
\begin_inset Formula $u^{0}(\mathbf{x})=U(\mathbf{x})/k_{B}T^{0}$
\end_inset

 and we then obtain the reduced energies simply by scaling:
\begin_inset Formula 
\[
u^{k}(\mathbf{x})=\frac{T^{0}}{T^{k}}u^{0}(\mathbf{x})=\frac{u^{0}(\mathbf{x})}{\tau_{k}}
\]

\end_inset

where 
\begin_inset Formula $\tau_{k}$
\end_inset

 is the relative temperature.
\end_layout

\begin_layout Section
Results
\end_layout

\begin_layout Subsection
Double well
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
a)
\begin_inset Graphics
	filename figs/doublewell_KLML_pX.png
	width 30col%

\end_inset

 d)
\begin_inset Graphics
	filename figs/doublewell_KLRC_pX.png
	width 30col%

\end_inset


\end_layout

\begin_layout Plain Layout
b)
\begin_inset Graphics
	filename figs/doublewell_KLML_pXrew.png
	width 30col%

\end_inset

 e)
\begin_inset Graphics
	filename figs/doublewell_KLRC_pXrew.png
	width 30col%

\end_inset


\end_layout

\begin_layout Plain Layout
c)
\begin_inset Graphics
	filename figs/doublewell_KLML_LatentMCMC.pdf
	lyxscale 50
	width 30col%

\end_inset

 f)
\begin_inset Graphics
	filename figs/doublewell_KLRC_LatentMCMC.pdf
	lyxscale 50
	width 30col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Boltzmann Generator for 2D double well described in 
\begin_inset CommandInset citation
LatexCommand cite
key "NoeWu_18_BoltzmannGenerators"
literal "false"

\end_inset

.
 Left 
\series bold
(a-c)
\series default
: Training with ML+KL loss.
 Right 
\series bold
(d-f)
\series default
: Training with ML+KL+RC loss.
 
\series bold
(a,c)
\series default
 Free energy corresponding to distribution generated by Boltzmann Generator.
 
\series bold
(b,e)
\series default
 Free energy after reweighting as in 
\begin_inset CommandInset citation
LatexCommand cite
key "NoeWu_18_BoltzmannGenerators"
literal "false"

\end_inset

.
 
\series bold
(c,f)
\series default
 Top: Trajectory with direct MCMC (blue) and latent MCMC (yellow).
 Bottom: Free energy from latent MCMC samples (yellow) compared to exact
 free energy (black).
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Particle dimer
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
a)
\begin_inset Graphics
	filename figs/particles_system.png
	width 60col%

\end_inset


\end_layout

\begin_layout Plain Layout
b)
\begin_inset Graphics
	filename figs/particles_MD.png
	width 60col%

\end_inset


\end_layout

\begin_layout Plain Layout
c)
\begin_inset Graphics
	filename figs/particles_latentMCMC_distance.png
	width 30col%

\end_inset

 d)
\begin_inset Graphics
	filename figs/particles_latentMCMC_z2.png
	width 30col%

\end_inset


\end_layout

\begin_layout Plain Layout
e)
\begin_inset Graphics
	filename figs/particles_latentMCMC_E.png
	width 30col%

\end_inset

 f)
\begin_inset Graphics
	filename figs/particles_latentMCMC_J.png
	width 30col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Boltzmann Generator for bistable repulsive particle system described in
 
\begin_inset CommandInset citation
LatexCommand cite
key "NoeWu_18_BoltzmannGenerators"
literal "false"

\end_inset

.
 
\series bold
a)
\series default
 Open and closed states, dimer distance is governed by a double-well potential.
 
\series bold
b)
\series default
 Short MCMC trajectories in open and closed states.
 MCMC mixing time is extremely long (estimated on the order of 
\begin_inset Formula $10^{12}$
\end_inset

 time steps).
 
\series bold
c-f)
\series default
 Latent MCMC Simulation trajectory with 
\begin_inset Formula $10^{6}$
\end_inset

 steps shows poor mixing due to kinetic traps.
 
\series bold
c)
\series default
 Dimer distance, 
\series bold
d)
\series default
 Squared norm of latent vector, 
\begin_inset Formula $\frac{1}{d}\mathbf{z}^{\top}\mathbf{z}$
\end_inset

, where 
\begin_inset Formula $d$
\end_inset

 is the dimension, 
\series bold
e)
\series default
 Potential energy, 
\series bold
f)
\series default
 log determinant of the Jacobian.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
btprint "btPrintCited"
bibfiles "/Users/noe/data/my_papers/bib/all,/Users/noe/data/my_papers/bib/own"
options "plain"

\end_inset


\end_layout

\end_body
\end_document
